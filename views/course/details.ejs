<div class="p-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/dashboard">Home</a></li>
        <li class="breadcrumb-item"><a href="/course">Course</a></li>
        <li class="breadcrumb-item active" id="courseBreadcrumb" ></li>
    </ol>
    <h4 class="card-title">Course Details for <span id="courseName"></span></h4>

    <div class="card mb-4">
        <div id="courseDetails" class="card-body">
            <h4 class="card-title">Information</h4>
            <table class="table table-striped table-bordered">
                <tr><th>Name</th><td id="courseNameDetail"></td></tr>
                <tr><th>Teacher</th><td id="courseTeacher"></td></tr>
                <tr><th>Start Date</th><td id="courseStartDate"></td></tr>
                <tr><th>End Date</th><td id="courseEndDate"></td></tr>
                <tr><th>Exclude Dates</th><td id="courseExcludeDates"></td></tr>
                <tr><th>Number of Students</th><td id="courseStudentCount"></td></tr>
            </table>
        </div>
    </div>

    <div class="card mb-4">
        <div id="studentList" class="card-body">
            <h4 class="card-title">Student List</h4>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Assignment Marks</th>
                        <th>Attendance Ratio</th>
                    </tr>
                </thead>
                <tbody id="students">
                    <template id="studentItem">
                        <tr>
                            <td>${name}</td>
                            <td>${email}</td>
                            <td>${marks}</td>
                            <td>${attendanceRatio}</td>
                        </tr>
                    </template>
                </tbody>
            </table>
        </div>
    </div>

    <div class="card mb-4">
        <div id="assignmentList" class="card-body">
            <h4 class="card-title">Assignment List
                <button class="btn btn-primary" id="addAssignmentButton">Add Assignment(s)</button>
            </h4>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Due Date</th>
                        <th>Avg Marks</th>
                        <th>Marked</th>
                        <th>Submitted</th>
                        <th>Assignment Link</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="assignments">
                    <template id="assignmentItem">
                        <tr>
                            <td>${name}</td>
                            <td>${dueDate}</td>
                            <td>${avgMarks}</td>
                            <td>${markedCount}</td>
                            <td>${submittedCount}</td>
                            <td>
                                <a href="${fileUrl}" target="_blank">View Submission</a>
                            </td>
                            <td>
                                <a href="/course/assignments/mark/${id}" class="btn btn-secondary btn-sm">Mark assignment</a>
                                <a href="/course/assignments/edit/${id}" class="btn btn-secondary btn-sm">Edit</a>
                                <button class="btn btn-danger btn-sm delete-assignment" data-id="${id}">Delete</button>
                            </td>
                        </tr>
                    </template>
                </tbody>
            </table>
        </div>
    </div>

    <div class="card">
        <div class="card-body mb-4">
            <h4 class="card-title">Statisic</h4>
            <div class="row">
                <div class="col">
                    <div id="attendanceRatio" class="card border-warning mb-3">
                        <div class="card-header">Attendance Ratio</div>
                        <div class="card-body">
                            <canvas id="attendanceChart"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div id="assignmentMarksRatio" class="card border-info mb-3">
                        <div class="card-header">Assignment Marks Ratio</div>
                        <div class="card-body">
                            <canvas id="marksChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(() => {
        const { courseId } = $.getUrlParameter('/course/detail/:courseId')

        axios.get(`/api/course/details/${courseId}`).then(({ data: response }) => {
            console.log('response', response)
            if (!response.success) {
                return alert(`Error fetching course details: ${response.message}`)
            }
            const { course, assignments, students } = response.data;

            displayCourseDetails(course)
            displayStudentList(students)
            displayAssignmentList(assignments)
            displayAttendanceChart(students)
            displayMarksChart(assignments)
        })
        
        const displayCourseDetails = course => {
            // Course Details
            $('#courseName').text(course.name)
            $('#courseNameDetail').text(course.name)
            $('#courseTeacher').text(course.teacher.name)
            $('#courseStartDate').text(new Date(course.startDate).toLocaleDateString())
            $('#courseEndDate').text(new Date(course.endDate).toLocaleDateString())
            $('#courseExcludeDates').text(course.excludeDates.map(date => moment(date).format('YYYY-MM-DD')).join(', '))
            $('#courseStudentCount').text(course.students.length)

            //breadcrumb
            $('#courseBreadcrumb').text(course.name).attr('href', `/course/detail/${course._id}`);

        }

        const displayStudentList = students => {
            students.forEach(student => {
                $.cloneTemplate('#studentItem', {
                    ...student,
                    marks: `${student.marks.sum}/${student.marks.total} (${(student.marks.sum / student.marks.total * 100).toFixed(2)}%)`,
                    attendanceRatio: `${Math.trunc(student.attendance.ratio * 100).toFixed(2)}%`
                })
            })
        }

        const displayAssignmentList = assignments => {
            assignments.forEach(assignment => {
                $.cloneTemplate('#assignmentItem', {
                    ...assignment,
                    id: assignment._id,
                    dueDate: moment(assignment.dueDate).local().format('DD-MM-YYYY'),
                    avgMarks: assignment.avgMarks?.toFixed(2) || 0,
                })
            })
        }

        const displayAttendanceChart = students => {
            const status = students.reduce((result, student) => {
                result.present += student.attendance.present
                result.absent += student.attendance.absent
                result.late += student.attendance.late
                return result
            }, {
                present: 0,
                absent: 0,
                late: 0,
            })
            const attendanceCtx = document.getElementById('attendanceChart').getContext('2d');
            new Chart(attendanceCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Present', 'Absent', 'Late'],
                    datasets: [{
                        data: [status.present, status.absent, status.late],
                        backgroundColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)']
                    }]
                }
            });
        }

        const displayMarksChart = assignments => {
            const status = assignments.reduce((result, assignment) => {
                result.passed += assignment.status.passed
                result.failed += assignment.status.failed
                return result
            }, {
                passed: 0,
                failed: 0,
            })
            const marksCtx = document.getElementById('marksChart').getContext('2d');
            new Chart(marksCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Passed', 'Failed'],
                    datasets: [{
                        data: [status.passed, status.failed],
                        backgroundColor: ['rgb(54, 162, 235)', 'rgb(255, 99, 132)']
                    }]
                }
            })
        }

        //add assignment
        $('#addAssignmentButton').on('click', event => {
            window.location.href = `/course/assignments/add/${courseId}`
        })

        //delete assignment
        $(document).on('click', '.delete-assignment', async event => {
            const AssignmentConfirmed = await confirm('Are you sure you want to delete this assignment?');
            if (AssignmentConfirmed) {
                const assignmentId = $(event.target).data('id')

                axios.delete(`/api/assignments/${assignmentId}`).then(({ data: response }) => {
                    if (!response.success) {
                        return alert(`An error occurred: ${response.message}`)
                    }
                    location.reload()
                })
            }
        })
    })
</script>
<%- contentFor('title') %>Course Detail